<?php


namespace Pixelant\Transliterator\DataHandling;


use Symfony\Component\String\Slugger\AsciiSlugger;
use TYPO3\CMS\Core\Localization\LanguageService;
use TYPO3\CMS\Core\Site\Entity\Site;
use TYPO3\CMS\Core\Site\Entity\SiteLanguage;
use TYPO3\CMS\Core\Site\SiteFinder;
use TYPO3\CMS\Core\Utility\GeneralUtility;

class SlugHelper extends \TYPO3\CMS\Core\DataHandling\SlugHelper
{
    const SYMBOL_MAPPING_FILE_PATH = 'EXT:transliterator/Resources/Private/Language/symbolMapping.xlf';

    /**
     * @var SiteLanguage
     */
    protected $language = null;

    public function sanitize(string $slug): string
    {
        $parts = explode('/', $slug);

        $locale = null;
        $symbolsMap = [];
        if ($this->language !== null) {
            $locale = $this->language->getLocale();
            $symbolsMap = [$locale => $this->getSymbolsMap()];
        }


        /** @var AsciiSlugger $slugger */
        $slugger = GeneralUtility::makeInstance(AsciiSlugger::class, $locale, $symbolsMap);

        foreach ($parts as &$part) {
            $part = $slugger->slug(
                $part,
                (string)($this->configuration['fallbackCharacter'] ?? '-')
            )->lower();
        }

        return implode('/', $parts);
    }

    public function generate(array $recordData, int $pid): string
    {
        $languageFieldName = $GLOBALS['TCA'][$this->tableName]['ctrl']['languageField'] ?? null;
        $languageId = (int)($recordData[$languageFieldName] ?? 0);

        /** @var Site $site */
        $site = GeneralUtility::makeInstance(SiteFinder::class)->getSiteByPageId($pid);

        $this->language = $site->getLanguageById($languageId);

        return parent::generate($recordData, $pid); // TODO: Change the autogenerated stub
    }

    protected function getSymbolsMap(): array
    {
        /** @var LanguageService $languageService */
        $languageService = GeneralUtility::makeInstance(LanguageService::class);
        $languageService->init($this->language->getTypo3Language());

        $symbolLabels = $languageService->includeLLFile(static::SYMBOL_MAPPING_FILE_PATH);

        $symbolsMap = [];
        foreach (array_pop($symbolLabels) ?? [] as $symbol => $value) {
            $symbolsMap[$symbol] = ($value[0]['target'] ?? $value[0]['source']) ?? '';
        }

        return $symbolsMap;
    }
}
